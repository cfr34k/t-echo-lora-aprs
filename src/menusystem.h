/*
 * vim: noexpandtab
 *
 * Copyright (c) 2022 Thomas Kolb <cfr34k-git@tkolb.de>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef MENUSYSTEM_H
#define MENUSYSTEM_H

#include <stdint.h>
#include <stdbool.h>

/** @brief Events generated by the menu system. */
typedef enum
{
	MENUSYSTEM_EVT_EXIT_MENU,       /**< Generated when the user leaves the top-level menu. */
	MENUSYSTEM_EVT_REDRAW_REQUIRED, /**< Menu needs to be redrawn without any other action. */
	MENUSYSTEM_EVT_RX_ENABLE,
	MENUSYSTEM_EVT_RX_DISABLE,
	MENUSYSTEM_EVT_TRACKER_ENABLE,
	MENUSYSTEM_EVT_TRACKER_DISABLE,
	MENUSYSTEM_EVT_GNSS_WARMUP_ENABLE,
	MENUSYSTEM_EVT_GNSS_WARMUP_DISABLE,
	MENUSYSTEM_EVT_APRS_SYMBOL_CHANGED,
} menusystem_evt_t;

/** @brief Event-related data. */
typedef union
{
	struct
	{
		char table;
		char symbol;
	} aprs_symbol;
} menusystem_evt_data_t;

/** @brief Inputs (commands) to the menu system. */
typedef enum
{
	MENUSYSTEM_INPUT_CONFIRM, /**< Confirm the currently selected entry. */
	MENUSYSTEM_INPUT_NEXT,    /**< Select the next entry. */
} menusystem_input_t;

/** @brief Callback function for menusystem events. */
typedef void (*menusystem_callback_t)(menusystem_evt_t evt, const menusystem_evt_data_t *data);

/** @brief Initialize the menusystem.
 *
 * @param[in] callback   Pointer to the callback function.
 */
void menusystem_init(menusystem_callback_t callback);

/** @brief Enter the menusystem.
 *
 * @details
 * Populates the menu structure with the current values and activates the main menu.
 */
void menusystem_enter(void);

/** @brief Process some input.
 *
 * Updates the internal state depending on the input and eventually produces an
 * event via the callback function.
 *
 * @param[in] input   The input command to process.
 */
void menusystem_input(menusystem_input_t input);

/** @brief Render the menu.
 *
 * @details
 * Draws the current menu state on the epaper display.
 *
 * @param[in]   first_line_base   y coordinate of the baseline of the first menu entry.
 */
void menusystem_render(uint8_t first_line_base);

/** @brief Check whether the menu is currently active.
 *
 * @note Call @ref menusystem_enter() to activate the menu.
 *
 * @returns   Whether the menu is currently active.
 */
bool menusystem_is_active(void);

#endif // MENUSYSTEM_H
